{"remainingRequest":"/Users/karen.chen/Desktop/yuan-yang-view/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/karen.chen/Desktop/yuan-yang-view/src/views/Domains.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/karen.chen/Desktop/yuan-yang-view/src/views/Domains.vue","mtime":1557905362393},{"path":"/Users/karen.chen/Desktop/yuan-yang-view/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/karen.chen/Desktop/yuan-yang-view/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/karen.chen/Desktop/yuan-yang-view/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/karen.chen/Desktop/yuan-yang-view/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/karen.chen/Desktop/yuan-yang-view/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport textFieldRules from \"../utils/textFieldRules.js\";\nimport setting from \"./setting\";\n\nexport default {\n    mixins: [textFieldRules],\n\n    component: {\n        setting\n    },\n    data() {\n        return {\n            drawer: true,\n            showDetail: false,\n            perPage: 20,\n            pages: 0,\n            searchText: \"\",\n            filterData: [],\n            headers: [\n                {\n                    text: \"#\",\n                    align: \"left\",\n                    sortable: false,\n                    width: \"80px\",\n                    value: \"id\"\n                },\n                {\n                    text: \"Domain Name\",\n                    align: \"left\",\n                    sortable: true,\n                    value: \"name\"\n                },\n                {\n                    text: \"CName\",\n                    align: \"left\",\n                    sortable: true,\n                    value: \"cname\"\n                },\n                {\n                    text: \"Actions\",\n                    align: \"left\",\n                    value: \"action\",\n                    width: \"200px\"\n                }\n            ],\n            pagination: {\n                rowsPerPage: 20\n            },\n            rowsPerPageItems: [\n                { name: \"20 per page\", value: 20 },\n                { name: \"50 per pages\", value: 50 }\n            ],\n            rawData: [],\n            dialog: {\n                edit: false\n            },\n            error: {\n                status: false,\n                message: \"\"\n            },\n            domain: {},\n            editedIndex: -1,\n            // groupData: [],\n            operatorAuth: 0\n            // userGroups: []\n        };\n    },\n    methods: {\n        getAllDomains: function() {\n            this.$store.dispatch(\"global/startLoading\");\n            this.$store\n                .dispatch(\"domains/getAllDomains\")\n                .then(\n                    function(result) {\n                        // console.log(result.data.domain);\n                        this.filterData = result.data.domains;\n                        // this.handleData();\n                        this.setPages();\n                        this.$store.dispatch(\"global/finishLoading\");\n                    }.bind(this)\n                )\n                .catch(\n                    function(error) {\n                        this.$store.dispatch(\"global/finishLoading\");\n                        this.$store.dispatch(\n                            \"global/showSnackbarError\",\n                            error.message\n                        );\n                    }.bind(this)\n                );\n        },\n        // filterDataAction: function() {\n        //     if (this.searchText != \"\") {\n        //         this.filterData = this.filterData.filter(row => {\n        //             return (\n        //                 !this.searchText ||\n        //                 row.name\n        //                     .toLowerCase()\n        //                     .indexOf(this.searchText.toLowerCase()) > -1 ||\n        //                 row.cname\n        //                     .toLowerCase()\n        //                     .indexOf(this.searchText.toLowerCase()) > -1\n        //             );\n        //         });\n        //     } else {\n        //         this.filterData = this.filterData;\n        //     }\n        //     this.setPages();\n        // },\n        editItem: function(item, type) {\n            this.editedIndex = this.filterData.indexOf(item);\n            this.domain = Object.assign({}, item);\n            if (type == 0) {\n                this.dialog.edit = true;\n            }\n        },\n        updateDomain: function() {\n            if (this.$refs.editForm.validate()) {\n                this.$store.dispatch(\"global/startLoading\");\n                if (this.editedIndex == -1) {\n                    this.addNewDomain();\n                } else {\n                    this.$store.dispatch(\"global/startLoading\");\n                    this.$store\n                        .dispatch(\"domains/updateDomain\", this.domain)\n                        .then(\n                            function(result) {\n                                this.$store.dispatch(\"global/finishLoading\");\n                                this.getAllDomains();\n                                this.closeEditDialog();\n                            }.bind(this)\n                        )\n                        .catch(\n                            function(error) {\n                                this.$store.dispatch(\"global/finishLoading\");\n                                this.$store.dispatch(\n                                    \"global/showSnackbarError\",\n                                    error.message\n                                );\n                            }.bind(this)\n                        );\n                }\n            }\n        },\n        addItem: function() {\n            this.$refs.editForm.reset();\n            this.editedIndex = -1;\n            this.dialog.edit = true;\n        },\n        addNewDomain: function() {\n            this.domain.user_group_id = this.$store.getters[\n                \"account/accountGroupId\"\n            ]();\n            // console.log(this.domain);\n            var vm = this;\n            if (this.$refs.editForm.validate()) {\n                this.$store.dispatch(\"global/startLoading\");\n                this.$store\n                    .dispatch(\"domains/newDomain\", this.domain)\n                    .then(\n                        function(result) {\n                            this.$store.dispatch(\n                                \"global/showSnackbarSuccess\",\n                                \"Update user success!\"\n                            );\n                            this.getAllDomains();\n                            this.$store.dispatch(\"global/finishLoading\");\n                        }.bind(this)\n                    )\n                    .catch(\n                        function(error) {\n                            this.$store.dispatch(\n                                \"global/showSnackbarError\",\n                                error.message\n                            );\n                            this.$store.dispatch(\"global/finishLoading\");\n                        }.bind(this)\n                    );\n                this.closeEditDialog();\n            }\n        },\n        closeEditDialog: function() {\n            this.dialog.edit = false;\n        },\n        setPages: function() {\n            if (this.perPage == null || this.filterData == null) {\n                this.pages = null;\n            } else {\n                this.pages = Math.ceil(this.filterData.length / this.perPage);\n            }\n        }\n    },\n    computed: {\n        formTitle() {\n            return this.editedIndex === -1 ? \"New Domain\" : \"Edit Domain\";\n        }\n    },\n    watch: {\n        perPage: function(value) {\n            this.pagination.rowsPerPage = value;\n            this.setPages();\n        }\n    },\n    mounted() {\n        this.$router.push(\"admin/domains\");\n        this.getAllDomains();\n    },\n    created() {\n        this.getAllDomains();\n        // console.log(\"xx\");\n    }\n};\n",{"version":3,"sources":["Domains.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Domains.vue","sourceRoot":"src/views","sourcesContent":["<template lang=\"pug\">\n    v-container#domains\n        v-layout(wrap column)\n            v-flex(xs12)\n                .title.text-xs-left.mb-4 Domains\n            v-flex(xs12)\n                v-card\n                    v-card-title\n                        v-layout(row align-center)\n                            v-flex.px-2(xs12 sm6 md3)\n                                v-text-field.pt-0.mt-0(v-model=\"searchText\" append-icon=\"search\" label=\"Search\" single-line hide-details)\n                            v-spacer\n                            v-btn(color=\"primary\" dark @click=\"addItem\") Add Domain\n                    v-data-table.elevation-1(:headers=\"headers\" :items=\"filterData\" :loading=\"$store.state.global.isLoading\" :pagination.sync=\"pagination\"  hide-actions :search=\"searchText\")\n                        v-progress-linear(v-slot:progress color=\"primary\")\n                        template(slot=\"items\" slot-scope=\"props\")\n                            tr\n                                td.text-xs-left {{props.index +1}}\n                                td.text-xs-left() \n                                    .name.font-weight-medium {{props.item.name}}\n                                td.text-xs-left {{props.item.cname}}\n                                td.text-xs-left\n                                    v-btn.ma-0(flat icon small color=\"primary\" @click=\"editItem(props.item, 0)\" title=\"edit domain\")\n                                        v-icon(small) edit\n                                    v-btn(color=\"primary\" dark small outline :to=\"{ name: 'setting', query :{ data:  props.item } }\") More\n                    v-layout.px-2(row align-center)\n                        v-flex.text-xs-left.py-3(xs4)\n                        v-flex.text-xs-right.py-3(xs8)\n                            v-pagination(v-model=\"pagination.page\" :length=\"pages\" :total-visible=\"7\" color=\"primary\")\n        //- Dialogs\n        v-dialog.edit-dialog(v-model=\"dialog.edit\" max-width=\"460\" persistent)\n            v-card\n                v-card-title.title {{formTitle}}\n                v-card-text\n                    v-form(ref=\"editForm\")\n                        v-text-field(v-model=\"domain.name\" label=\"Domain Name\" type=\"text\" name=\"name\" :rules=\"[rules.required]\")\n                        v-text-field(v-model=\"domain.cname\" label=\"CName\" type=\"text\" name=\"cname\")\n                        v-alert.text-md-left(:value=\"error.status\" color=\"error\" icon=\"warning\" outline transition=\"scale-transition\") {{error.message}}\n                v-card-actions  \n                    v-spacer\n                    v-btn(color=\"grey\" flat=\"flat\" @click=\"closeEditDialog\") Cancel\n                    v-btn(color=\"primary\" flat=\"flat\" @click=\"updateDomain\") Save\n</template>\n\n\n<script>\nimport textFieldRules from \"../utils/textFieldRules.js\";\nimport setting from \"./setting\";\n\nexport default {\n    mixins: [textFieldRules],\n\n    component: {\n        setting\n    },\n    data() {\n        return {\n            drawer: true,\n            showDetail: false,\n            perPage: 20,\n            pages: 0,\n            searchText: \"\",\n            filterData: [],\n            headers: [\n                {\n                    text: \"#\",\n                    align: \"left\",\n                    sortable: false,\n                    width: \"80px\",\n                    value: \"id\"\n                },\n                {\n                    text: \"Domain Name\",\n                    align: \"left\",\n                    sortable: true,\n                    value: \"name\"\n                },\n                {\n                    text: \"CName\",\n                    align: \"left\",\n                    sortable: true,\n                    value: \"cname\"\n                },\n                {\n                    text: \"Actions\",\n                    align: \"left\",\n                    value: \"action\",\n                    width: \"200px\"\n                }\n            ],\n            pagination: {\n                rowsPerPage: 20\n            },\n            rowsPerPageItems: [\n                { name: \"20 per page\", value: 20 },\n                { name: \"50 per pages\", value: 50 }\n            ],\n            rawData: [],\n            dialog: {\n                edit: false\n            },\n            error: {\n                status: false,\n                message: \"\"\n            },\n            domain: {},\n            editedIndex: -1,\n            // groupData: [],\n            operatorAuth: 0\n            // userGroups: []\n        };\n    },\n    methods: {\n        getAllDomains: function() {\n            this.$store.dispatch(\"global/startLoading\");\n            this.$store\n                .dispatch(\"domains/getAllDomains\")\n                .then(\n                    function(result) {\n                        // console.log(result.data.domain);\n                        this.filterData = result.data.domains;\n                        // this.handleData();\n                        this.setPages();\n                        this.$store.dispatch(\"global/finishLoading\");\n                    }.bind(this)\n                )\n                .catch(\n                    function(error) {\n                        this.$store.dispatch(\"global/finishLoading\");\n                        this.$store.dispatch(\n                            \"global/showSnackbarError\",\n                            error.message\n                        );\n                    }.bind(this)\n                );\n        },\n        // filterDataAction: function() {\n        //     if (this.searchText != \"\") {\n        //         this.filterData = this.filterData.filter(row => {\n        //             return (\n        //                 !this.searchText ||\n        //                 row.name\n        //                     .toLowerCase()\n        //                     .indexOf(this.searchText.toLowerCase()) > -1 ||\n        //                 row.cname\n        //                     .toLowerCase()\n        //                     .indexOf(this.searchText.toLowerCase()) > -1\n        //             );\n        //         });\n        //     } else {\n        //         this.filterData = this.filterData;\n        //     }\n        //     this.setPages();\n        // },\n        editItem: function(item, type) {\n            this.editedIndex = this.filterData.indexOf(item);\n            this.domain = Object.assign({}, item);\n            if (type == 0) {\n                this.dialog.edit = true;\n            }\n        },\n        updateDomain: function() {\n            if (this.$refs.editForm.validate()) {\n                this.$store.dispatch(\"global/startLoading\");\n                if (this.editedIndex == -1) {\n                    this.addNewDomain();\n                } else {\n                    this.$store.dispatch(\"global/startLoading\");\n                    this.$store\n                        .dispatch(\"domains/updateDomain\", this.domain)\n                        .then(\n                            function(result) {\n                                this.$store.dispatch(\"global/finishLoading\");\n                                this.getAllDomains();\n                                this.closeEditDialog();\n                            }.bind(this)\n                        )\n                        .catch(\n                            function(error) {\n                                this.$store.dispatch(\"global/finishLoading\");\n                                this.$store.dispatch(\n                                    \"global/showSnackbarError\",\n                                    error.message\n                                );\n                            }.bind(this)\n                        );\n                }\n            }\n        },\n        addItem: function() {\n            this.$refs.editForm.reset();\n            this.editedIndex = -1;\n            this.dialog.edit = true;\n        },\n        addNewDomain: function() {\n            this.domain.user_group_id = this.$store.getters[\n                \"account/accountGroupId\"\n            ]();\n            // console.log(this.domain);\n            var vm = this;\n            if (this.$refs.editForm.validate()) {\n                this.$store.dispatch(\"global/startLoading\");\n                this.$store\n                    .dispatch(\"domains/newDomain\", this.domain)\n                    .then(\n                        function(result) {\n                            this.$store.dispatch(\n                                \"global/showSnackbarSuccess\",\n                                \"Update user success!\"\n                            );\n                            this.getAllDomains();\n                            this.$store.dispatch(\"global/finishLoading\");\n                        }.bind(this)\n                    )\n                    .catch(\n                        function(error) {\n                            this.$store.dispatch(\n                                \"global/showSnackbarError\",\n                                error.message\n                            );\n                            this.$store.dispatch(\"global/finishLoading\");\n                        }.bind(this)\n                    );\n                this.closeEditDialog();\n            }\n        },\n        closeEditDialog: function() {\n            this.dialog.edit = false;\n        },\n        setPages: function() {\n            if (this.perPage == null || this.filterData == null) {\n                this.pages = null;\n            } else {\n                this.pages = Math.ceil(this.filterData.length / this.perPage);\n            }\n        }\n    },\n    computed: {\n        formTitle() {\n            return this.editedIndex === -1 ? \"New Domain\" : \"Edit Domain\";\n        }\n    },\n    watch: {\n        perPage: function(value) {\n            this.pagination.rowsPerPage = value;\n            this.setPages();\n        }\n    },\n    mounted() {\n        this.$router.push(\"admin/domains\");\n        this.getAllDomains();\n    },\n    created() {\n        this.getAllDomains();\n        // console.log(\"xx\");\n    }\n};\n</script>\n\n<style lang=\"sass\" scoped>\n.child-table\n    tr  \n        background-color: #F5F5F5\n    tr:hover\n        background-color: #E0E0E0 !important\n</style>"]}]}