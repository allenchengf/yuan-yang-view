{"remainingRequest":"/Users/karen.chen/Desktop/user-module/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/karen.chen/Desktop/user-module/src/components/UsersTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/karen.chen/Desktop/user-module/src/components/UsersTable.vue","mtime":1557469485972},{"path":"/Users/karen.chen/Desktop/user-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/karen.chen/Desktop/user-module/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/karen.chen/Desktop/user-module/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/karen.chen/Desktop/user-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/karen.chen/Desktop/user-module/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport textFieldRules from \"../utils/textFieldRules\";\n\nexport default {\n    mixins: [textFieldRules],\n    props: {\n        rawData: {\n            type: Array\n        },\n        refreshData: {\n            type: Function,\n            default: function() {}\n        },\n        userGroupId: {\n            type: Number,\n            default: 0\n        },\n        status: {\n            type: Boolean\n        }\n    },\n    data() {\n        return {\n            user_type: \"\",\n            perPage: 20,\n            pages: 0,\n            searchText: \"\",\n            filterData: [],\n            headers: [\n                {\n                    text: \"#\",\n                    align: \"left\",\n                    sortable: false,\n                    width: \"80px\",\n                    value: \"id\"\n                },\n                {\n                    text: \"User\",\n                    align: \"left\",\n                    sortable: true,\n                    value: \"name\"\n                },\n                {\n                    text: \"Role\",\n                    align: \"left\",\n                    value: \"user_type\",\n                    width: \"100px\",\n                    sortable: true\n                },\n                // {\n                //     text: \"Email\",\n                //     align: \"left\",\n                //     width: \"200px\",\n                //     value: \"email\",\n                //     sortable: true\n                // },\n                {\n                    text: \"Last login time\",\n                    align: \"left\",\n                    width: \"200px\",\n                    value: \"timestamp\",\n                    sortable: true\n                },\n                {\n                    text: \"Status\",\n                    align: \"left\",\n                    width: \"100px\",\n                    value: \"status\",\n                    sortable: true\n                },\n                {\n                    text: \"Actions\",\n                    align: \"left\",\n                    value: \"action\",\n                    width: \"150px\",\n                    sortable: true\n                }\n            ],\n            pagination: {\n                rowsPerPage: 20\n            },\n            rowsPerPageItems: [\n                { name: \"20 per page\", value: 20 },\n                { name: \"50 per pages\", value: 50 }\n            ],\n            products: [],\n            dialog: {\n                edit: false,\n                delete: false,\n                password: false,\n                otp: false\n            },\n            userInfo: {},\n            editedIndex: -1,\n            deleteIndex: -1,\n            roleItems: [\n                { name: \"Admin\", value: \"admin\" },\n                { name: \"User\", value: \"user\" }\n            ],\n            roleItem: [{ name: \"Hiero7\", value: \"hiero7\" }],\n            error: {\n                status: false,\n                message: \"\"\n            }\n        };\n    },\n    methods: {\n        filterDataAction: function() {\n            if (this.searchText == \"\") {\n                this.filterData = this.rawData;\n            } else {\n                this.filterData = this.rawData.filter(row => {\n                    return (\n                        !this.searchText ||\n                        row.email\n                            .toLowerCase()\n                            .indexOf(this.searchText.toLowerCase()) > -1 ||\n                        row.name\n                            .toLowerCase()\n                            .indexOf(this.searchText.toLowerCase()) > -1 ||\n                        row.user_type\n                            .toLowerCase()\n                            .indexOf(this.searchText.toLowerCase()) > -1 ||\n                        row.last_login_time\n                            .toLowerCase()\n                            .indexOf(this.searchText.toLowerCase()) > -1\n                    );\n                });\n            }\n            this.setPages();\n        },\n        addItem: function() {\n            this.$refs.editForm.reset();\n            this.userInfo = { user_group_id: this.userGroupId };\n            this.editedIndex = -1;\n            this.dialog.edit = true;\n        },\n        addNewUser: function() {\n            if (this.userInfo.user_type == \"hiero7\") {\n                this.userInfo.user_group_id = 1;\n            } else if (this.userInfo.user_type == \"admin\") {\n                this.userInfo.level = 1;\n            } else {\n                this.userInfo.level = 2;\n            }\n            this.$store\n                .dispatch(\"users/newUser\", this.userInfo)\n                .then(\n                    function(result) {\n                        this.$store.dispatch(\n                            \"global/showSnackbarSuccess\",\n                            \"Update user success!\"\n                        );\n                        this.refreshData();\n                    }.bind(this)\n                )\n                .catch(\n                    function(error) {\n                        this.$store.dispatch(\n                            \"global/showSnackbarError\",\n                            error.message\n                        );\n                        this.$store.dispatch(\"global/finishLoading\");\n                    }.bind(this)\n                );\n            this.closeEditDialog();\n        },\n        editItem: function(item, type) {\n            var vm = this;\n            // this.$refs.editForm.reset();\n            this.$store.dispatch(\"global/startLoading\");\n            this.editedIndex = this.filterData.indexOf(item);\n            this.userInfo = Object.assign({}, item);\n            if (this.userInfo.user_type == \"hiero7\") {\n                this.userInfo.user_group_id = 1;\n            } else if (this.userInfo.user_type == \"admin\") {\n                this.userInfo.level = 1;\n            } else {\n                this.userInfo.level = 2;\n            }\n            if (type == 0) {\n                this.dialog.edit = true;\n            } else {\n                this.dialog.password = true;\n                this.$store.dispatch(\"global/finishLoading\");\n            }\n        },\n        updateUser: async function() {\n            if (this.userInfo.user_type == \"hiero7\") {\n                this.userInfo.user_group_id = 1;\n            } else if (this.userInfo.user_type == \"admin\") {\n                this.userInfo.level = 1;\n            } else {\n                this.userInfo.level = 2;\n            }\n            if (this.$refs.editForm.validate()) {\n                this.$store.dispatch(\"global/startLoading\");\n                if (this.editedIndex == -1) {\n                    this.addNewUser();\n                } else {\n                    try {\n                        var response = await this.$store.dispatch(\n                            \"users/updateUserProfile\",\n                            this.userInfo\n                        );\n                        if (\n                            this.userInfo.user_type != \"origin\" &&\n                            this.userInfo.user_type != \"hiero7\"\n                        ) {\n                            var roleResponse = await this.$store.dispatch(\n                                \"users/updateUserRole\",\n                                {\n                                    uid: this.userInfo.uid,\n                                    level: this.userInfo.level\n                                }\n                            );\n                        }\n                        if (this.userInfo.user_type == \"user\") {\n                            var productsResponse = await this.$axios.post(\n                                \"portal/users/\" +\n                                    this.userInfo.uid +\n                                    \"/products\",\n                                {\n                                    products: JSON.stringify(\n                                        this.userInfo.products\n                                    )\n                                }\n                            );\n                        }\n                        this.$store.dispatch(\n                            \"global/showSnackbarSuccess\",\n                            \"Update user success!\"\n                        );\n                    } catch (error) {\n                        this.$store.dispatch(\n                            \"global/showSnackbarError\",\n                            error.message\n                                ? error.message\n                                : error.response.data.message\n                        );\n                        this.$store.dispatch(\"global/finishLoading\");\n                    }\n                    this.refreshData();\n                    this.closeEditDialog();\n                }\n            }\n        },\n\n        updateUserStatus: function(item, status) {\n            this.$store.dispatch(\"global/startLoading\");\n            var user = Object.assign({}, item);\n\n            this.$store\n                .dispatch(\"users/updateUserStatus\", {\n                    uid: user.uid,\n                    status: status\n                })\n                .then(\n                    function(result) {\n                        this.refreshData();\n                        this.$store.dispatch(\n                            \"global/showSnackbarSuccess\",\n                            \"Update status success!\"\n                        );\n                    }.bind(this)\n                )\n                .catch(\n                    function(error) {\n                        this.$store.dispatch(\n                            \"global/showSnackbarError\",\n                            error.message\n                        );\n                        this.$store.dispatch(\"global/finishLoading\");\n                    }.bind(this)\n                );\n        },\n\n        forgotPassword: function(item) {\n            var user = Object.assign({}, item);\n            this.$store.dispatch(\"global/startLoading\");\n\n            this.$store\n                .dispatch(\"account/forgotPassword\", user.email)\n                .then(\n                    function(result) {\n                        this.$store.dispatch(\n                            \"global/showSnackbarSuccess\",\n                            \"An e-mail will be sent to \" +\n                                user.email +\n                                \" with further instructions.\"\n                        );\n                        this.$store.dispatch(\"global/finishLoading\");\n                    }.bind(this)\n                )\n                .catch(\n                    function(error) {\n                        this.$store.dispatch(\n                            \"global/showSnackbarError\",\n                            error.message\n                        );\n                        this.$store.dispatch(\"global/finishLoading\");\n                    }.bind(this)\n                );\n        },\n        closeEditDialog: function() {\n            this.dialog.edit = false;\n            this.$store.dispatch(\"global/finishLoading\");\n        },\n        closeDeleteDialog: function() {\n            this.dialog.dlelete = false;\n            this.deleteIndex = -1;\n        },\n        closePasswordDialog: function() {\n            this.dialog.password = false;\n            this.$refs.passwordForm.reset();\n        },\n        setPages: function() {\n            if (this.perPage == null || this.filterData == null) {\n                this.pages = null;\n            } else {\n                this.pages = Math.ceil(this.filterData.length / this.perPage);\n            }\n        }\n    },\n    computed: {\n        formTitle() {\n            return this.editedIndex === -1 ? \"New User\" : \"Edit User\";\n        }\n    },\n    watch: {\n        rawData: function() {\n            this.rawData.forEach((obj, idx) => {\n                obj.status = obj.deleted_at == null ? true : false;\n            });\n            this.filterData = this.rawData;\n            this.setPages();\n        },\n        searchText: function(value) {\n            this.filterDataAction();\n        },\n        perPage: function(value) {\n            this.pagination.rowsPerPage = value;\n            this.setPages();\n        }\n    },\n    mounted() {\n        this.filterDataAction();\n    }\n};\n",{"version":3,"sources":["UsersTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UsersTable.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"pug\">\n    #user-table\n        v-card\n            v-card-title\n                v-layout(row align-center)\n                    //- v-flex.px-2(xs12 sm6 md2)\n                    //-     v-select.pt-0.mt-0(v-model=\"perPage\" :items=\"rowsPerPageItems\" item-text=\"name\" item-value=\"value\" hide-details)\n                    v-flex.px-2(xs12 sm6 md3)\n                        v-text-field.pt-0.mt-0(v-model=\"searchText\" append-icon=\"search\" label=\"Search\" single-line hide-details)\n                    v-spacer\n                    v-btn(color=\"primary\" dark @click=\"addItem\" :disabled=\"!status\") Add User\n            v-data-table.elevation-1(:headers=\"headers\" :items=\"filterData\" :search=\"searchText\" :loading=\"$store.state.global.isLoading\" :pagination.sync=\"pagination\"  hide-actions )\n                template(slot=\"items\" slot-scope=\"props\" color=\"primary\")\n                    tr(:class=\"props.item.status? '': 'grey--text'\")\n                        td.text-xs-left() {{props.index +1}}\n                        td.text-xs-left() \n                            .name.font-weight-medium {{props.item.name}}\n                            .email.grey--text.text--darken-3 {{props.item.email}}\n                        td.text-xs-left()  {{(props.item.user_type == \"origin\")? 'root': props.item.user_type}}\n                        td.text-xs-left() {{props.item.last_login_time}}\n                        td.text-xs-left() {{(props.item.status)? 'acive' : 'inactive'}}\n                        td.text-xs-left()\n                            v-btn.ma-0(flat icon small color=\"primary\" @click=\"editItem(props.item, 0)\" title=\"edit user\" :disabled=\"!props.item.status\" v-if=\"props.item.user_type != 'origin'\")\n                                v-icon(small) edit\n                            //- v-btn.ma-0(flat icon small color=\"primary\" @click=\"editItem(props.item, 1)\" title=\"change password\" :disabled=\"!props.item.status\" v-if=\"props.item.user_type != 'origin'\")\n                            //-     v-icon(small) lock\n                            v-menu(offset-y left v-if=\"props.item.user_type != 'origin'\") \n                                template(v-slot:activator=\"{on}\")\n                                    v-btn.ma-0(flat icon small color=\"primary\" v-on=\"on\" :disabled=\"!status\")\n                                        v-icon( small) more_vert\n                                v-list.pa-0\n                                    v-list-tile(v-if=\"props.item.status\" @click=\"updateUserStatus(props.item, 0)\")\n                                        v-list-tile-title inactive user\n                                    v-list-tile(v-else @click=\"updateUserStatus(props.item, 1)\")\n                                        v-list-tile-title active user\n                                    v-list-tile(@click=\"forgotPassword(props.item)\")\n                                        v-list-tile-title reset password\n            v-layout.px-2(row align-center)\n                v-flex.text-xs-left.py-3(xs4)\n                    //- b.total-items total: {{filterData.length}} \n                v-flex.text-xs-right.py-3(xs8)\n                    v-pagination(v-model=\"pagination.page\" :length=\"pages\" :total-visible=\"7\" color=\"primary\")\n        //- Dialogs\n        v-dialog.edit-dialog(v-model=\"dialog.edit\" max-width=\"460\" persistent)\n            v-card\n                v-card-title.title {{formTitle}}\n                v-card-text\n                    v-form(ref=\"editForm\")\n                        v-text-field(v-model=\"userInfo.name\" label=\"Name\" type=\"text\" name=\"name\" :rules=\"[rules.required]\")\n                        .role-select(v-if=\"user_type == 'hiero7'\")\n                            v-select(v-model=\"userInfo.user_type\" :items=\"roleItem\" item-text=\"name\" item-value=\"value\" label=\"Role\" :rules=\"[rules.required]\")\n\n                        .role-select(v-else)\n                            v-select(v-if=\"userInfo.user_type !== 'origin'\" v-model=\"userInfo.user_type\" :items=\"roleItems\" item-text=\"name\" item-value=\"value\" label=\"Role\" :rules=\"[rules.required]\" ) \n                            v-text-field(v-else label=\"Role\" type=\"text\" name=\"role\" disabled value=\"Admin\") \n                            //- .role-select\n                            //-     v-select(v-if=\"userInfo.user_type != 'origin'\" v-model=\"userInfo.user_type\" :items=\"roleItems\" item-text=\"name\" item-value=\"value\" label=\"Role\" :rules=\"[rules.required]\" )\n                            //-     v-text-field(v-else label=\"Role\" type=\"text\" name=\"role\" disabled value=\"Admin\") \n\n                        v-text-field(v-model=\"userInfo.email\" label=\"Email\" type=\"text\" name=\"email\" :rules=\"[rules.required, rules.email]\" :disabled=\"editedIndex === -1 ? false : true\")\n                        v-text-field(v-model=\"userInfo.phone\" label=\"Phone\" type=\"text\" name=\"phone\")\n                        v-text-field(v-model=\"userInfo.password\" label=\"Password\" type=\"password\" name=\"password\")\n                        //- v-text-field(v-if=\"editedIndex===-1\" v-model=\"userInfo.password\" label=\"Password\" type=\"password\" name=\"password\" :rules=\"[rules.required, rules.min]\" )\n\n                        //- v-select(v-if=\"userInfo.user_type == 'user' && editedIndex != -1\" v-model=\"userInfo.products\" :items=\"products\" item-text=\"name\" item-value=\"id\" label=\"Select Products\" multiple chips hint=\"permission\" persistent-hint return-object)\n                        v-alert.text-md-left(:value=\"error.status\" color=\"error\" icon=\"warning\" outline transition=\"scale-transition\") {{error.message}}\n\n                v-card-actions  \n                    v-spacer\n                    v-btn(color=\"grey\" flat=\"flat\" @click=\"closeEditDialog\") Cancel\n                    v-btn(color=\"primary\" flat=\"flat\" @click=\"updateUser\") Save\n        \n        //- v-dialog.change-ps-dialog(v-model=\"dialog.password\" max-width=\"460\")\n        //-     v-card  \n        //-         v-card-title.title Change User Password\n        //-         v-card-text\n        //-             v-form(ref=\"passwordForm\")\n        //-                 v-text-field(v-model=\"userInfo.email\" label=\"Email\" type=\"text\" name=\"email\" disabled)\n        //-                 v-text-field(v-model=\"userInfo.password\" label=\"Password\" type=\"password\" name=\"password\" :rules=\"[rules.required, rules.min]\" @change=\"verifyPassword\")\n        //-                 v-text-field(v-model=\"userInfo.confirmPassword\" label=\"Confirm Password\" type=\"password\" name=\"confirmpassword\" :rules=\"[rules.required, rules.password]\")\n        //-         v-card-actions  \n        //-             v-spacer\n        //-             v-btn(color=\"grey\" flat=\"flat\" @click=\"closePasswordDialog\") Cancel\n        //-             v-btn(color=\"primary\" flat=\"flat\" @click=\"updatePassword\") Save\n        //- v-dialog.otp-dialog(v-model=\"dialog.otp\" max-width=\"460\" )\n        //-     v-card()\n        //-         v-card-title.title Disable two-step verification\n        //-         v-card-text\n        //-             .text.text-xs-left If you disable two-step verification, this account's owner only need email and password when sign in to the website.\n        //-         v-card-actions  \n        //-             v-spacer\n        //-             v-btn(color=\"grey\" flat=\"flat\" @click=\"dialog.otp = false\") Cancel\n        //-             v-btn(color=\"primary\" flat=\"flat\" @click=\"disableOtp\") Disable\n</template>\n<script>\nimport textFieldRules from \"../utils/textFieldRules\";\n\nexport default {\n    mixins: [textFieldRules],\n    props: {\n        rawData: {\n            type: Array\n        },\n        refreshData: {\n            type: Function,\n            default: function() {}\n        },\n        userGroupId: {\n            type: Number,\n            default: 0\n        },\n        status: {\n            type: Boolean\n        }\n    },\n    data() {\n        return {\n            user_type: \"\",\n            perPage: 20,\n            pages: 0,\n            searchText: \"\",\n            filterData: [],\n            headers: [\n                {\n                    text: \"#\",\n                    align: \"left\",\n                    sortable: false,\n                    width: \"80px\",\n                    value: \"id\"\n                },\n                {\n                    text: \"User\",\n                    align: \"left\",\n                    sortable: true,\n                    value: \"name\"\n                },\n                {\n                    text: \"Role\",\n                    align: \"left\",\n                    value: \"user_type\",\n                    width: \"100px\",\n                    sortable: true\n                },\n                // {\n                //     text: \"Email\",\n                //     align: \"left\",\n                //     width: \"200px\",\n                //     value: \"email\",\n                //     sortable: true\n                // },\n                {\n                    text: \"Last login time\",\n                    align: \"left\",\n                    width: \"200px\",\n                    value: \"timestamp\",\n                    sortable: true\n                },\n                {\n                    text: \"Status\",\n                    align: \"left\",\n                    width: \"100px\",\n                    value: \"status\",\n                    sortable: true\n                },\n                {\n                    text: \"Actions\",\n                    align: \"left\",\n                    value: \"action\",\n                    width: \"150px\",\n                    sortable: true\n                }\n            ],\n            pagination: {\n                rowsPerPage: 20\n            },\n            rowsPerPageItems: [\n                { name: \"20 per page\", value: 20 },\n                { name: \"50 per pages\", value: 50 }\n            ],\n            products: [],\n            dialog: {\n                edit: false,\n                delete: false,\n                password: false,\n                otp: false\n            },\n            userInfo: {},\n            editedIndex: -1,\n            deleteIndex: -1,\n            roleItems: [\n                { name: \"Admin\", value: \"admin\" },\n                { name: \"User\", value: \"user\" }\n            ],\n            roleItem: [{ name: \"Hiero7\", value: \"hiero7\" }],\n            error: {\n                status: false,\n                message: \"\"\n            }\n        };\n    },\n    methods: {\n        filterDataAction: function() {\n            if (this.searchText == \"\") {\n                this.filterData = this.rawData;\n            } else {\n                this.filterData = this.rawData.filter(row => {\n                    return (\n                        !this.searchText ||\n                        row.email\n                            .toLowerCase()\n                            .indexOf(this.searchText.toLowerCase()) > -1 ||\n                        row.name\n                            .toLowerCase()\n                            .indexOf(this.searchText.toLowerCase()) > -1 ||\n                        row.user_type\n                            .toLowerCase()\n                            .indexOf(this.searchText.toLowerCase()) > -1 ||\n                        row.last_login_time\n                            .toLowerCase()\n                            .indexOf(this.searchText.toLowerCase()) > -1\n                    );\n                });\n            }\n            this.setPages();\n        },\n        addItem: function() {\n            this.$refs.editForm.reset();\n            this.userInfo = { user_group_id: this.userGroupId };\n            this.editedIndex = -1;\n            this.dialog.edit = true;\n        },\n        addNewUser: function() {\n            if (this.userInfo.user_type == \"hiero7\") {\n                this.userInfo.user_group_id = 1;\n            } else if (this.userInfo.user_type == \"admin\") {\n                this.userInfo.level = 1;\n            } else {\n                this.userInfo.level = 2;\n            }\n            this.$store\n                .dispatch(\"users/newUser\", this.userInfo)\n                .then(\n                    function(result) {\n                        this.$store.dispatch(\n                            \"global/showSnackbarSuccess\",\n                            \"Update user success!\"\n                        );\n                        this.refreshData();\n                    }.bind(this)\n                )\n                .catch(\n                    function(error) {\n                        this.$store.dispatch(\n                            \"global/showSnackbarError\",\n                            error.message\n                        );\n                        this.$store.dispatch(\"global/finishLoading\");\n                    }.bind(this)\n                );\n            this.closeEditDialog();\n        },\n        editItem: function(item, type) {\n            var vm = this;\n            // this.$refs.editForm.reset();\n            this.$store.dispatch(\"global/startLoading\");\n            this.editedIndex = this.filterData.indexOf(item);\n            this.userInfo = Object.assign({}, item);\n            if (this.userInfo.user_type == \"hiero7\") {\n                this.userInfo.user_group_id = 1;\n            } else if (this.userInfo.user_type == \"admin\") {\n                this.userInfo.level = 1;\n            } else {\n                this.userInfo.level = 2;\n            }\n            if (type == 0) {\n                this.dialog.edit = true;\n            } else {\n                this.dialog.password = true;\n                this.$store.dispatch(\"global/finishLoading\");\n            }\n        },\n        updateUser: async function() {\n            if (this.userInfo.user_type == \"hiero7\") {\n                this.userInfo.user_group_id = 1;\n            } else if (this.userInfo.user_type == \"admin\") {\n                this.userInfo.level = 1;\n            } else {\n                this.userInfo.level = 2;\n            }\n            if (this.$refs.editForm.validate()) {\n                this.$store.dispatch(\"global/startLoading\");\n                if (this.editedIndex == -1) {\n                    this.addNewUser();\n                } else {\n                    try {\n                        var response = await this.$store.dispatch(\n                            \"users/updateUserProfile\",\n                            this.userInfo\n                        );\n                        if (\n                            this.userInfo.user_type != \"origin\" &&\n                            this.userInfo.user_type != \"hiero7\"\n                        ) {\n                            var roleResponse = await this.$store.dispatch(\n                                \"users/updateUserRole\",\n                                {\n                                    uid: this.userInfo.uid,\n                                    level: this.userInfo.level\n                                }\n                            );\n                        }\n                        if (this.userInfo.user_type == \"user\") {\n                            var productsResponse = await this.$axios.post(\n                                \"portal/users/\" +\n                                    this.userInfo.uid +\n                                    \"/products\",\n                                {\n                                    products: JSON.stringify(\n                                        this.userInfo.products\n                                    )\n                                }\n                            );\n                        }\n                        this.$store.dispatch(\n                            \"global/showSnackbarSuccess\",\n                            \"Update user success!\"\n                        );\n                    } catch (error) {\n                        this.$store.dispatch(\n                            \"global/showSnackbarError\",\n                            error.message\n                                ? error.message\n                                : error.response.data.message\n                        );\n                        this.$store.dispatch(\"global/finishLoading\");\n                    }\n                    this.refreshData();\n                    this.closeEditDialog();\n                }\n            }\n        },\n\n        updateUserStatus: function(item, status) {\n            this.$store.dispatch(\"global/startLoading\");\n            var user = Object.assign({}, item);\n\n            this.$store\n                .dispatch(\"users/updateUserStatus\", {\n                    uid: user.uid,\n                    status: status\n                })\n                .then(\n                    function(result) {\n                        this.refreshData();\n                        this.$store.dispatch(\n                            \"global/showSnackbarSuccess\",\n                            \"Update status success!\"\n                        );\n                    }.bind(this)\n                )\n                .catch(\n                    function(error) {\n                        this.$store.dispatch(\n                            \"global/showSnackbarError\",\n                            error.message\n                        );\n                        this.$store.dispatch(\"global/finishLoading\");\n                    }.bind(this)\n                );\n        },\n\n        forgotPassword: function(item) {\n            var user = Object.assign({}, item);\n            this.$store.dispatch(\"global/startLoading\");\n\n            this.$store\n                .dispatch(\"account/forgotPassword\", user.email)\n                .then(\n                    function(result) {\n                        this.$store.dispatch(\n                            \"global/showSnackbarSuccess\",\n                            \"An e-mail will be sent to \" +\n                                user.email +\n                                \" with further instructions.\"\n                        );\n                        this.$store.dispatch(\"global/finishLoading\");\n                    }.bind(this)\n                )\n                .catch(\n                    function(error) {\n                        this.$store.dispatch(\n                            \"global/showSnackbarError\",\n                            error.message\n                        );\n                        this.$store.dispatch(\"global/finishLoading\");\n                    }.bind(this)\n                );\n        },\n        closeEditDialog: function() {\n            this.dialog.edit = false;\n            this.$store.dispatch(\"global/finishLoading\");\n        },\n        closeDeleteDialog: function() {\n            this.dialog.dlelete = false;\n            this.deleteIndex = -1;\n        },\n        closePasswordDialog: function() {\n            this.dialog.password = false;\n            this.$refs.passwordForm.reset();\n        },\n        setPages: function() {\n            if (this.perPage == null || this.filterData == null) {\n                this.pages = null;\n            } else {\n                this.pages = Math.ceil(this.filterData.length / this.perPage);\n            }\n        }\n    },\n    computed: {\n        formTitle() {\n            return this.editedIndex === -1 ? \"New User\" : \"Edit User\";\n        }\n    },\n    watch: {\n        rawData: function() {\n            this.rawData.forEach((obj, idx) => {\n                obj.status = obj.deleted_at == null ? true : false;\n            });\n            this.filterData = this.rawData;\n            this.setPages();\n        },\n        searchText: function(value) {\n            this.filterDataAction();\n        },\n        perPage: function(value) {\n            this.pagination.rowsPerPage = value;\n            this.setPages();\n        }\n    },\n    mounted() {\n        this.filterDataAction();\n    }\n};\n</script>\n<style lang=\"sass\" scoped>\n\n</style>\n\n\n"]}]}